@using CaptchaMvc.HtmlHelpers
@model ViewModels.RegisterViewModel

@{
    var captcha = Html.Captcha(Resources.Resource.CaptchaRefreshText, "", 4, Resources.Resource.CaptchaRequiredMessage, false);
}

@{
    var x = "";
}

@if (System.Threading.Thread.CurrentThread.CurrentCulture.ToString() == "fa-IR")
{
    x = "float:right";
}

<div class="container container-ver2">
    <div class="page-login box space-50">
        <div class="row">
            <div class="col-md-6 sign-in space-30" style="@x">
                <div class="register box space-50">
                    @if (ViewBag.IsSuccess == null)
                    {
                        <h3>@Resources.Resource.CreateANewAccountLabel</h3>
                        <p>@Resources.Resource.CreateYourOwnAccountLabel</p>
                        using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()
                            <div class="group box space-20">
                                @Html.LabelFor(model => model.Username, Resources.Resource.Username, htmlAttributes: new { @class = "control-label" }) <span class="requiredStar">*</span>
                                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", placeholder = @Resources.Resource.Username } })
                                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })

                                @if (ViewBag.IsExistEmail != null)
                                {
                                    <div class="alert alert-warning">
                                        @Resources.Resource.DuplicateEmail
                                        <br />
                                        @Resources.Resource.ForResetPasswordMessage<a href="/ResetPassword"> @Resources.Resource.Here</a>
                                    </div>
                                }
                            </div>
                        
                            <div class="group box space-20">
                                @Html.LabelFor(model => model.Email, Resources.Resource.Email, htmlAttributes: new { @class = "control-label" }) <span class="requiredStar">*</span>
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = @Resources.Resource.YourEmail } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })

                                @if (ViewBag.IsExistEmail != null)
                                {
                                    <div class="alert alert-warning">
                                        @Resources.Resource.DuplicateEmail
                                        <br />
                                        @Resources.Resource.ForResetPasswordMessage<a href="/ResetPassword"> @Resources.Resource.Here</a>
                                    </div>
                                }
                            </div>

                            <div class="group box space-20">
                                @Html.LabelFor(model => model.Password, Resources.Resource.Password, htmlAttributes: new { @class = "control-label" }) <span class="requiredStar">*</span>
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = @Resources.Resource.Password } })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>

                            <div class="group box space-20">
                                @Html.LabelFor(model => model.ComparePassword, Resources.Resource.ConfirmPassword, htmlAttributes: new { @class = "control-label" }) <span class="requiredStar">*</span>
                                @Html.EditorFor(model => model.ComparePassword, new { htmlAttributes = new { @class = "form-control", placeholder = @Resources.Resource.ConfirmPassword } })
                                @Html.ValidationMessageFor(model => model.ComparePassword, "", new { @class = "text-danger" })
                            </div>

                            <div class="group box space-20">
                                @captcha
                                @Html.ValidationMessage(captcha.BuildInfo.InputElementId, new { @class = "text-danger" })
                            </div>
                            <button type="submit" class="link-v1 rt">@Resources.Resource.SignUpButton</button>
                        }
                    }
                    else
                    {
                        <div class="alert alert-success width:160%">@Resources.Resource.SignInSendEmailMessage</div>
                    }
                </div>
                <!-- End register -->
                @*<div class="sigg-to-day box">
                        <h3>@Resources.Resource.SignUpTodayLabel</h3>
                        <form class="form-horizontal" method="POST">
                            <div class="checkbox">
                                <input id="check1" type="checkbox" name="check" value="check1">
                                <label class="label-check" for="check1">Speed your way through the checkout.</label>
                                <input id="check2" type="checkbox" name="check" value="check2">
                                <label class="label-check" for="check2">Track your orders easily.</label>
                                <input id="check3" type="checkbox" name="check" value="check3">
                                <label class="label-check" for="check3">Keep a record of all purchases.</label>
                            </div>
                        </form>
                    </div>*@
            </div>
            <!-- End col-md-6 -->
        </div>
    </div>
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
